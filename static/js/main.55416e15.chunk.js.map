{"version":3,"sources":["components/Header.js","components/SubHeader.js","components/NavigationLink.js","components/NavigationBar.js","components/ViewPricingModal.js","components/Dashboard.js","containers/DashboardContainer.js","actions/index.js","constants/constants.js","components/ManageCampaigns.js","containers/ManageCampaignsContainer.js","App.js","serviceWorker.js","reducers/manageCampaigns.js","reducers/index.js","index.js"],"names":["Header","headerText","className","src","SubHeader","manageCampaigns","handleLanguageChange","isEnglish","type","onClick","NavigationLink","navLink","handleNavClick","pathname","replace","event","NavigationBar","navLinks","map","item","index","key","ViewPricingModal","modalContent","language","handleCloseBtnClick","style","backgroundImage","image_url","name","region","pricing","week","month","months","year","price","monthly","halfYearly","yearly","close","Dashboard","props","handleCalendarClick","currentCampaignName","calendarPositionTop","window","scrollY","target","getBoundingClientRect","top","offsetHeight","currentElement","parentElement","currentCampaignRow","classList","contains","querySelectorAll","innerHTML","setState","calendarVisible","state","document","getElementsByClassName","length","onCalendarValueChange","value","currentCampaignGroup","shiftedToCampaignGroup","updatedDate","Date","currentDate","currentCampaignYear","currentCampaignMonth","indexOf","currentCampaignDay","currentCampaignDate","getCampaign","updatedDataObject","getTime","updateCampaignsData","date","getFullYear","getMonth","getDate","handleModalClick","showModal","currentCamapignRow","currentCamapignName","this","campaign","view","actions","campaignsData","campaignDate","createdOn","gapDays","campaignDateString","Math","round","daysAgo","daysAhead","viewPricing","href","csv","report","scheduleAgain","onChange","Component","connect","dispatch","payload","englishLanguage","playBigger","upcomingCampaigns","liveCampaigns","pastCampaigns","germanLanguage","ManageCampaigns","transformData","campaignsDataInner","sortedData","allCampaigns","data","forEach","currentDateString","currentDateMonth","currentDateYear","campaignDateMonth","push","totalNavs","count","remove","add","campaignFilterType","slice","toLowerCase","sortedCampaignsData","setCampaignsData","campaignData","DashboardContainer","App","path","component","ManageCampaignsContainer","from","to","Boolean","location","hostname","match","initialState","action","nextState","Object","assign","overallUpdatedObject","find","sourceUpdatedObject","filter","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55416e15.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ({ headerText }) => {\n    return (\n        <header className=\"app-header\">\n            <img src=\"images/bluestack_logo.png\" ></img>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\n\nconst SubHeader = ({ manageCampaigns, handleLanguageChange, isEnglish }) => (\n    <div className=\"manage-campaigns-wrapper\">\n        <h1 className=\"manage-campaigns-heading\">{manageCampaigns}</h1>\n        <div className=\"change-language-container\">\n            <button type=\"button\" className=\"change-language-btn\" onClick={handleLanguageChange}>Change Language To {isEnglish ? 'German' : 'English'}</button>\n        </div>\n    </div>\n);\n\nexport default SubHeader;","import React from 'react';\n\nconst NavigationLink = ({navLink, handleNavClick}) => {\n    const pathname = navLink.replace(/\\s/g, ''); \n    return (\n        <div className=\"navigation-tab\" onClick={(event) => handleNavClick(event, pathname)}>\n            <span className=\"navigation-link\">{navLink}</span>\n        </div>\n    );\n}\n\nexport default NavigationLink;","import React from 'react';\nimport NavigationLink from './NavigationLink';\n\nconst NavigationBar = ({navLinks, handleNavClick}) => (\n    <div className=\"navigation-bar\">\n        {\n            navLinks.map((item, index) => <NavigationLink key={index} navLink={item} handleNavClick={handleNavClick} />)\n        }\n    </div>\n);\n\nexport default NavigationBar;","import React from 'react';\n\nconst ViewPricingModal = ({ modalContent, language, handleCloseBtnClick }) => (\n    <div className=\"view-pricing-modal\">\n        <div className=\"modal-header\">\n            <div className=\"header-image\" style={{backgroundImage: `url(${modalContent.image_url})`}}></div>\n            <div className=\"header-content\">\n                <p className=\"name\">{modalContent.name}</p>\n                <p className=\"location\">{modalContent.region}</p>\n            </div>\n        </div>\n        <div className=\"modal-body\">\n            <h3 className=\"heading\">{language.pricing}</h3>\n            <div className=\"content\">\n                <div className=\"period\">\n                    <p>{`1 ${language.week} - 1 ${language.month}`}</p>\n                    <p>{`6 ${language.months}`}</p>\n                    <p>{`1 ${language.year}`}</p>\n                </div>\n                <div className=\"price\">\n                    <p>{`$${modalContent.price.monthly}`}</p>\n                    <p>{`$${modalContent.price.halfYearly}`}</p>\n                    <p>{`$${modalContent.price.yearly}`}</p>\n                </div>\n            </div>\n        </div>\n        <div className=\"modal-footer\">\n            <div className=\"button-container\">\n                <button type=\"button\" className=\"close-modal\" onClick={handleCloseBtnClick}>{language.close}</button>\n            </div>\n        </div>\n    </div>\n);\n\nexport default ViewPricingModal;","import React, { Component } from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport ViewPricingModal from './ViewPricingModal';\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            calendarVisible: false,\n            date: new Date(),\n            currentCamapignRow: null,\n            currentCamapignName: '',\n            showModal: false,\n            modalContent: null\n        }\n    }\n\n    handleCalendarClick = (event) => {\n        let calendarPositionTop = window.scrollY + event.target.getBoundingClientRect().top + event.target.offsetHeight, currentElement = event.target.parentElement, currentCampaignRow = null, currentCampaignName = '';\n        while(!currentElement.classList.contains('campaign-row')) {\n            currentElement = currentElement.parentElement;\n        }\n        currentCampaignRow = currentElement;\n        currentCampaignName = currentCampaignRow.querySelectorAll('.campaign-info p')[0].innerHTML;\n        this.setState({\n            calendarVisible: !this.state.calendarVisible,\n            currentCampaignRow,\n            currentCampaignName\n        }, () => {\n            if(document.getElementsByClassName('react-calendar').length !== 0) {\n                document.getElementsByClassName('react-calendar')[0].style.top = calendarPositionTop + 'px';\n            }\n        });\n    }\n\n    onCalendarValueChange = (value) => {\n        this.setState({\n            calendarVisible: false\n        });\n        let monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        currentCampaignGroup = '', shiftedToCampaignGroup = '', updatedDate = new Date(value), currentDate = new Date(), currentCampaignName = this.state.currentCampaignName, currentCampaignRow = this.state.currentCampaignRow,\n        currentCampaignYear = currentCampaignRow.querySelectorAll('.campaign-date p span')[1].innerHTML,\n        currentCampaignMonth = monthNames.indexOf(currentCampaignRow.querySelectorAll('.campaign-date p span')[0].innerHTML) + 1,\n        currentCampaignDay = currentCampaignRow.querySelectorAll('.campaign-date p span')[2].innerHTML,\n        currentCampaignDate = new Date(`${currentCampaignYear}/${currentCampaignMonth}/${currentCampaignDay}`);\n\n        currentCampaignGroup = this.getCampaign(currentCampaignDate, currentDate);\n        shiftedToCampaignGroup = this.getCampaign(updatedDate, currentDate);\n\n        let updatedDataObject = { currentCampaignGroup, currentCampaignName, updatedDate: updatedDate.getTime(), shiftedToCampaignGroup };\n        if(currentCampaignDate.getTime() !== updatedDate.getTime()) {\n            this.props.updateCampaignsData(updatedDataObject);\n        }\n    }\n\n    getCampaign = (date, currentDate) => {\n        let campaignGroup = '';\n        if(date.getFullYear() === currentDate.getFullYear() && date.getMonth() === currentDate.getMonth() && date.getDate() === currentDate.getDate()) {\n            campaignGroup = 'liveCampaigns';\n        } else if(date < currentDate) {\n            campaignGroup = 'pastCampaigns';\n        } else {\n            campaignGroup = 'upcomingCampaigns';\n        }\n        return campaignGroup;\n    }\n\n    handleModalClick = (event, item) => {\n        this.setState({\n            showModal: true,\n            modalContent: item\n        });\n    }\n\n    handleCloseBtnClick = () => {\n        this.setState({\n            showModal: false\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <table className=\"manage-campaigns-data\">\n                    <thead>\n                        <tr>\n                            <th className=\"campaign-date\">{this.props.language.date}</th>\n                            <th className=\"campaign-detail\">{this.props.language.campaign}</th>\n                            <th className=\"view-campaign-pricing\">{this.props.language.view}</th>\n                            <th className=\"campaign-actions\">{this.props.language.actions}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            this.props.campaignsData.map(item => {\n                                const currentDate = new Date(), campaignDate = new Date(item.createdOn),\n                                monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; let gapDays = '', campaignDateString = '';\n                                if(campaignDate.getFullYear() === currentDate.getFullYear() && campaignDate.getMonth() === currentDate.getMonth() && campaignDate.getDate() === currentDate.getDate()) {\n                                    campaignDateString = 'Present Day';\n                                } else if(campaignDate < currentDate) {\n                                    gapDays = (currentDate.getTime() - campaignDate.getTime())/(24 * 60 * 60 * 1000);\n                                    gapDays = Math.round(gapDays);\n                                    campaignDateString = `${gapDays} ${this.props.language.daysAgo}`;\n                                } else {\n                                    gapDays = (campaignDate.getTime() - currentDate.getTime())/(24 * 60 * 60 * 1000);\n                                    gapDays = Math.round(gapDays);\n                                    campaignDateString = `${gapDays} ${this.props.language.daysAhead}`;\n                                }\n                                return (\n                                    <tr key={item.name} className=\"campaign-row\">\n                                        <td className=\"campaign-date\">\n                                            <p><span>{monthNames[campaignDate.getMonth()]}</span> <span>{campaignDate.getFullYear()}</span>, <span>{campaignDate.getDate()}</span></p>\n                                            <p>{campaignDateString}</p>\n                                        </td>\n                                        <td className=\"campaign-detail\">\n                                            <div className=\"campaign-image\"><i style={{backgroundImage: `url(${item.image_url})`}}></i></div>\n                                            <div className=\"campaign-info\">\n                                                <p>{item.name}</p>\n                                                <p>{item.region}</p>\n                                            </div>\n                                        </td>\n                                        <td className=\"view-campaign-pricing\">\n                                            <div className=\"view-pricing\" onClick={(event) => this.handleModalClick(event, item)}><span className=\"view-pricing-icon\"><i></i></span><span className=\"view-pricing-text\">{this.props.language.viewPricing}</span></div>\n                                        </td>\n                                        <td className=\"campaign-actions\">\n                                            <div className=\"csv\"><a href={item.csv}><i></i>CSV</a></div>\n                                            <div className=\"report\"><a href={item.report}><i></i>{this.props.language.report}</a></div>\n                                            <div className=\"schedule-again\" onClick={this.handleCalendarClick}><i></i>{this.props.language.scheduleAgain}</div>\n                                        </td>\n                                    </tr>\n                                )                        \n                            })\n                        }\n                    </tbody>\n                </table>\n                {\n                    this.state.calendarVisible ?\n                    <Calendar\n                        onChange={this.onCalendarValueChange}\n                        value={this.state.date} \n                    /> : null\n                }\n\n                {   this.state.showModal ?\n                    <ViewPricingModal \n                        modalContent={this.state.modalContent}\n                        language={this.props.language}\n                        handleCloseBtnClick={this.handleCloseBtnClick} \n                    /> : null\n                }\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;","import { connect } from 'react-redux';\nimport { updateCampaignsData } from '../actions';\nimport Dashboard from '../components/Dashboard';\n\nconst mapDispatchToProps = (dispatch) => ({\n    updateCampaignsData: (updatedDataObject) => dispatch(updateCampaignsData(updatedDataObject))\n});\n\nexport default connect(null, mapDispatchToProps)(Dashboard);","export const setCampaignsData = payload => {\n    debugger;\n\n    return {\n        type: 'SET_CAMPAIGNS_DATA',\n        payload\n    }\n}\n\nexport const updateCampaignsData = payload => ({\n    type: 'UPDATE_CAMPAIGNS_DATA',\n    payload\n}); ","export const englishLanguage = {\n    playBigger: 'Play Bigger',\n    manageCampaigns: 'Manage Campaigns',\n    upcomingCampaigns: 'Upcoming Campaigns',\n    liveCampaigns: 'Live Campaigns',\n    pastCampaigns: 'Past Campaigns',\n    date: 'DATE',\n    campaign: 'CAMPAIGN',\n    view: 'VIEW',\n    actions: 'ACTIONS',\n    viewPricing: 'View Pricing',\n    report: 'Report',\n    scheduleAgain: 'Schedule Again',\n    daysAgo: 'Days Ago',\n    daysAhead: 'Days Ahead',\n    pricing: 'Pricing',\n    week: 'Week',\n    month: 'Month',\n    months: 'Months',\n    year: 'Year',\n    close: 'Close'\n};\n\nexport const germanLanguage = {\n    playBigger: 'Spielen Sie größer',\n    manageCampaigns: 'Kampagnen verwalten',\n    upcomingCampaigns: 'Kommende Kampagnen',\n    liveCampaigns: 'Live-Kampagnen',\n    pastCampaigns: 'Vergangene Kampagnen',\n    date: 'DATUM',\n    campaign: 'KAMPAGNE',\n    view: 'AUSSICHT',\n    actions: 'AKTIONEN',\n    viewPricing: 'Preise anzeigen',\n    report: 'Bericht',\n    scheduleAgain: 'Planen Sie erneut',\n    daysAgo: 'Vor Tagen',\n    daysAhead: 'Tage voraus',\n    pricing: 'Preisgestaltung',\n    week: 'Woche',\n    month: 'Monat',\n    months: 'Monate',\n    year: 'Jahr',\n    close: 'Schließen'\n};","import React, { Component } from 'react';\nimport campaignsData from '../json/campaigns-data.json';\nimport Header from './Header';\nimport SubHeader from './SubHeader';\nimport NavigationBar from './NavigationBar';\nimport DashboardContainer from '../containers/DashboardContainer';\nimport { englishLanguage, germanLanguage } from '../constants/constants';\n\nclass ManageCampaigns extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            campaignFilterType: 'allCampaigns',\n            isEnglish: true\n        }\n    }\n\n    componentDidMount() {\n        const sortedCampaignsData = this.transformData(campaignsData);\n        this.props.setCampaignsData(sortedCampaignsData);\n    }\n\n    transformData = campaignsDataInner => {\n        const sortedData = {\n            allCampaigns: campaignsDataInner.data,\n            upcomingCampaigns: [],\n            liveCampaigns: [],\n            pastCampaigns: []\n        };\n        campaignsDataInner.data.forEach(item => {\n            const currentDateString = new Date(), currentDate = new Date().getDate(), currentDateMonth = new Date().getMonth(), currentDateYear = new Date().getFullYear(), campaignDateString = new Date(item.createdOn), campaignDate = new Date(item.createdOn).getDate(), campaignDateMonth = new Date(item.createdOn).getMonth(), campaignDateYear = new Date(item.createdOn).getFullYear();\n            if (campaignDateYear === currentDateYear && campaignDateMonth === currentDateMonth && campaignDate === currentDate) {\n                sortedData.liveCampaigns.push(item);\n            } else if (campaignDateString < currentDateString) {\n                sortedData.pastCampaigns.push(item);\n            } else {\n                sortedData.upcomingCampaigns.push(item);\n            }\n        });\n        return sortedData;\n    }\n\n    handleNavClick = (event, pathname) => {\n        const totalNavs = document.getElementsByClassName('navigation-tab').length;\n        for (let count = 0; count < totalNavs; count++) {\n            document.getElementsByClassName('navigation-tab')[count].classList.remove('active');\n        }\n        event.target.parentElement.classList.add('active');\n        const campaignFilterType = pathname.slice(0, 1).toLowerCase() + pathname.slice(1);\n        this.setState({ campaignFilterType });\n    }\n\n    handleLanguageChange = () => {\n        this.setState({ isEnglish: !this.state.isEnglish });\n    }\n\n    render() {\n        const campaignData = this.props.manageCampaigns[this.state.campaignFilterType];\n        const language = this.state.isEnglish ? englishLanguage : germanLanguage;\n        return (\n            <div>\n                <Header headerText={language.playBigger} />\n                <SubHeader manageCampaigns={language.manageCampaigns} handleLanguageChange={this.handleLanguageChange} isEnglish={this.state.isEnglish} />\n                <NavigationBar navLinks={[language.upcomingCampaigns, language.liveCampaigns, language.pastCampaigns]} handleNavClick={this.handleNavClick} />\n                <DashboardContainer campaignsData={campaignData} campaignFilterType={this.state.campaignFilterType} language={language} />\n            </div>\n        );\n    }\n}\n\nexport default ManageCampaigns;","import { connect } from 'react-redux';\nimport { setCampaignsData } from '../actions';\nimport ManageCampaigns from '../components/ManageCampaigns';\n\nconst mapStateToProps = state => ({\n    manageCampaigns: state.manageCampaigns\n});\n\nconst mapDispatchToProps = dispatch => ({\n    setCampaignsData: (sortedCampaignsData) => dispatch(setCampaignsData(sortedCampaignsData))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageCampaigns);\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport './scss/manageCampaigns.scss';\nimport ManageCampaignsContainer from './containers/ManageCampaignsContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path='/ManageCampaigns' component={ManageCampaignsContainer} />\n        </Switch>\n        <Redirect from='/' to='/ManageCampaigns' />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    allCampaigns: [],\n    upcomingCampaigns: [],\n    liveCampaigns: [],\n    pastCampaigns: []\n};\n\nconst manageCampaigns = (state = initialState, action) => {\n    switch(action.type) {\n        case 'SET_CAMPAIGNS_DATA':\n            return {\n                ...state,\n                allCampaigns: action.payload.allCampaigns,\n                upcomingCampaigns: action.payload.upcomingCampaigns,\n                liveCampaigns: action.payload.liveCampaigns,\n                pastCampaigns: action.payload.pastCampaigns\n            };\n        case 'UPDATE_CAMPAIGNS_DATA':\n            const nextState = Object.assign({}, state),\n            overallUpdatedObject = nextState['allCampaigns'].find(item => item.name === action.payload.currentCampaignName),\n            sourceUpdatedObject = nextState[action.payload.currentCampaignGroup].find(item => item.name === action.payload.currentCampaignName);\n            overallUpdatedObject.createdOn = action.payload.updatedDate;\n            sourceUpdatedObject.createdOn = action.payload.updatedDate;\n            nextState[action.payload.currentCampaignGroup] = nextState[action.payload.currentCampaignGroup].filter(item => item.name !== action.payload.currentCampaignName);\n            nextState[action.payload.shiftedToCampaignGroup].push(sourceUpdatedObject);\n            return nextState;\n        default:\n            return state;\n    }\n};\n\nexport default manageCampaigns;","import { combineReducers } from 'redux';\nimport manageCampaigns from './manageCampaigns';\n\nexport default combineReducers({\n    manageCampaigns\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers'\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}